package leetcode.editor.cn;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.junit.Assert;
import org.junit.Test;

class SolutionTest36 {

    //判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
//
// 
// 数字 1-9 在每一行只能出现一次。 
// 数字 1-9 在每一列只能出现一次。 
// 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。 
// 
//
// 
//
// 上图是一个部分填充的有效的数独。 
//
// 数独部分空格内已填入了数字，空白格用 '.' 表示。 
//
// 示例 1: 
//
// 输入:
//[
//  ['5','3','.','.','7','.','.','.','.'],
//  ['6','.','.','1','9','5','.','.','.'],
//  ['.','9','8','.','.','.','.','6','.'],
//  ['8','.','.','.','6','.','.','.','3'],
//  ['4','.','.','8','.','3','.','.','1'],
//  ['7','.','.','.','2','.','.','.','6'],
//  ['.','6','.','.','.','.','2','8','.'],
//  ['.','.','.','4','1','9','.','.','5'],
//  ['.','.','.','.','8','.','.','7','9']
//]
//输出: true
// 
//
// 示例 2: 
//
// 输入:
//[
//  ['8','3','.','.','7','.','.','.','.'],
//  ['6','.','.','1','9','5','.','.','.'],
//  ['.','9','8','.','.','.','.','6','.'],
//  ['8','.','.','.','6','.','.','.','3'],
//  ['4','.','.','8','.','3','.','.','1'],
//  ['7','.','.','.','2','.','.','.','6'],
//  ['.','6','.','.','.','.','2','8','.'],
//  ['.','.','.','4','1','9','.','.','5'],
//  ['.','.','.','.','8','.','.','7','9']
//]
//输出: false
//解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
//     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。 
//
// 说明: 
//
// 
// 一个有效的数独（部分已被填充）不一定是可解的。 
// 只需要根据以上规则，验证已经填入的数字是否有效即可。 
// 给定数独序列只包含数字 1-9 和字符 '.' 。 
// 给定数独永远是 9x9 形式的。 
// 
// Related Topics 哈希表
    public static

//leetcode submit region begin(Prohibit modification and deletion)
    class Solution {

        public boolean isValidSudoku(char[][] board) {
            Map<Integer, Set<Character>> dict = new HashMap<>();
            for (int i = 0; i < 27; i++) {
                dict.put(i, new HashSet<>());
            }
            for (int i = 0; i < 9; i++) {
                for (int j = 0; j < 9; j++) {
                    char c = board[i][j];
                    if (board[i][j] == '.') {
                        continue;
                    }
                    //获取行
                    Set<Character> rowSet = dict.get(i);
                    if (rowSet.contains(c)) {
                        return false;
                    } else {
                        rowSet.add(c);
                    }
                    //获取列
                    Set<Character> colSet = dict.get(9 + j);
                    if (colSet.contains(c)) {
                        return false;
                    } else {
                        colSet.add(c);
                    }
                    //获取3*3
                    Set<Character> matrixSet = dict.get(18 + (i / 3) * 3 + j / 3);
                    if (matrixSet.contains(c)) {
                        return false;
                    } else {
                        matrixSet.add(c);
                    }
                }
            }
            return true;
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

    //Do some Test
    public static class TestClass {

        @Test
        public void defaultSolutionTest() {
            Solution solution = new Solution();
            Assert.assertTrue(solution.isValidSudoku(new char[][]{
                    {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                    {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                    {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                    {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                    {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                    {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                    {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                    {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                    {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
            }));

            Assert.assertFalse(solution.isValidSudoku(new char[][]{
                    {'8', '3', '.', '.', '7', '.', '.', '.', '.'},
                    {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                    {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                    {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                    {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                    {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                    {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                    {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                    {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
            }));
            Assert.assertFalse(solution.isValidSudoku(new char[][]{
                    {'.', '.', '4', '.', '.', '.', '6', '3', '.'},
                    {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                    {'5', '.', '.', '.', '.', '.', '.', '9', '.'},
                    {'.', '.', '.', '5', '6', '.', '.', '.', '.'},
                    {'4', '.', '3', '.', '.', '.', '.', '.', '1'},
                    {'.', '.', '.', '7', '.', '.', '.', '.', '.'},
                    {'.', '.', '.', '5', '.', '.', '.', '.', '.'},
                    {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                    {'.', '.', '.', '.', '.', '.', '.', '.', '.'}}));
        }
    }
}