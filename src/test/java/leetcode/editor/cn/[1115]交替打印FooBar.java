package leetcode.editor.cn;

import org.junit.Test;

import java.sql.Time;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

class SolutionTest1115 {
//Êàë‰ª¨Êèê‰æõ‰∏Ä‰∏™Á±ªÔºö 
//
// 
//class FooBar {
//  public void foo() {
//¬† ¬† for (int i = 0; i < n; i++) {
//¬† ¬† ¬† print("foo");
//¬†   }
//  }
//
//  public void bar() {
//¬† ¬† for (int i = 0; i < n; i++) {
//¬† ¬† ¬† print("bar");
//¬† ¬† }
//  }
//}
// 
//
// ‰∏§‰∏™‰∏çÂêåÁöÑÁ∫øÁ®ãÂ∞Ü‰ºöÂÖ±Áî®‰∏Ä‰∏™ FooBar ÂÆû‰æã„ÄÇÂÖ∂‰∏≠‰∏Ä‰∏™Á∫øÁ®ãÂ∞Ü‰ºöË∞ÉÁî® foo() ÊñπÊ≥ïÔºåÂè¶‰∏Ä‰∏™Á∫øÁ®ãÂ∞Ü‰ºöË∞ÉÁî® bar() ÊñπÊ≥ï„ÄÇ 
//
// ËØ∑ËÆæËÆ°‰øÆÊîπÁ®ãÂ∫èÔºå‰ª•Á°Æ‰øù "foobar" Ë¢´ËæìÂá∫ n Ê¨°„ÄÇ 
//
// 
//
// Á§∫‰æã 1: 
//
// 
//ËæìÂÖ•: n = 1
//ËæìÂá∫: "foobar"
//Ëß£Èáä: ËøôÈáåÊúâ‰∏§‰∏™Á∫øÁ®ãË¢´ÂºÇÊ≠•ÂêØÂä®„ÄÇÂÖ∂‰∏≠‰∏Ä‰∏™Ë∞ÉÁî® foo() ÊñπÊ≥ï, Âè¶‰∏Ä‰∏™Ë∞ÉÁî® bar() ÊñπÊ≥ïÔºå"foobar" Â∞ÜË¢´ËæìÂá∫‰∏ÄÊ¨°„ÄÇ
// 
//
// Á§∫‰æã 2: 
//
// 
//ËæìÂÖ•: n = 2
//ËæìÂá∫: "foobarfoobar"
//Ëß£Èáä: "foobar" Â∞ÜË¢´ËæìÂá∫‰∏§Ê¨°„ÄÇ
// 
// üëç 106 üëé 0

    public static
            //leetcode submit region begin(Prohibit modification and deletion)
    class FooBar {
        private int n;

        public FooBar(int n) {
            this.n = n;
        }

        private final Object lock = new Object();
        boolean status = false;

        public void foo(Runnable printFoo) throws InterruptedException {

            for (int i = 0; i < n; i++) {
                synchronized (lock) {
                    while (status) {
                        lock.wait();
                    }
                    status = true;
                    printFoo.run();
                    lock.notifyAll();
                }
                // printFoo.run() outputs "foo". Do not change or remove this line.

            }
        }

        public void bar(Runnable printBar) throws InterruptedException {

            for (int i = 0; i < n; i++) {
                synchronized (lock) {
                    while (!status) {
                        lock.wait();
                    }
                    status = false;
                    printBar.run();
                    lock.notifyAll();
                }
                // printBar.run() outputs "bar". Do not change or remove this line.
                ;
            }
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

    //Do some Test
    public static class TestClass {

        @Test
        public void defaultSolutionTest() throws InterruptedException {
            FooBar solution = new FooBar(10);
            ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(2, 2, 10, TimeUnit.SECONDS, new ArrayBlockingQueue<>(2));
            threadPoolExecutor.execute(new Runnable() {
                @Override
                public void run() {
                    try {
                        solution.bar(new Runnable() {
                            @Override
                            public void run() {
                                System.out.println("bar");
                            }
                        });
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            });
            threadPoolExecutor.execute(new Runnable() {
                @Override
                public void run() {
                    try {
                        solution.foo(new Runnable() {
                            @Override
                            public void run() {
                                System.out.print("foo");
                            }
                        });
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            });

            threadPoolExecutor.shutdown();
            threadPoolExecutor.awaitTermination(10, TimeUnit.SECONDS);
        }

    }
}