package leetcode.editor.cn;

import org.junit.Assert;
import org.junit.Test;

import java.util.*;

class SolutionTest2642 {
//Áªô‰Ω†‰∏Ä‰∏™Êúâ n ‰∏™ËäÇÁÇπÁöÑ ÊúâÂêëÂ∏¶ÊùÉ ÂõæÔºåËäÇÁÇπÁºñÂè∑‰∏∫ 0 Âà∞ n - 1 „ÄÇÂõæ‰∏≠ÁöÑÂàùÂßãËæπÁî®Êï∞ÁªÑ edges Ë°®Á§∫ÔºåÂÖ∂‰∏≠ edges[i] = [fromi,
//toi, edgeCosti] Ë°®Á§∫‰ªé fromi Âà∞ toi Êúâ‰∏ÄÊù°‰ª£‰ª∑‰∏∫ edgeCosti ÁöÑËæπ„ÄÇ
//
// ËØ∑‰Ω†ÂÆûÁé∞‰∏Ä‰∏™ Graph Á±ªÔºö
//
//
// Graph(int n, int[][] edges) ÂàùÂßãÂåñÂõæÊúâ n ‰∏™ËäÇÁÇπÔºåÂπ∂ËæìÂÖ•ÂàùÂßãËæπ„ÄÇ
// addEdge(int[] edge) ÂêëËæπÈõÜ‰∏≠Ê∑ªÂä†‰∏ÄÊù°ËæπÔºåÂÖ∂‰∏≠ edge = [from, to, edgeCost] „ÄÇÊï∞ÊçÆ‰øùËØÅÊ∑ªÂä†ËøôÊù°Ëæπ‰πãÂâçÂØπÂ∫îÁöÑ‰∏§
//‰∏™ËäÇÁÇπ‰πãÈó¥Ê≤°ÊúâÊúâÂêëËæπ„ÄÇ
// int shortestPath(int node1, int node2) ËøîÂõû‰ªéËäÇÁÇπ node1 Âà∞ node2 ÁöÑË∑ØÂæÑ ÊúÄÂ∞è ‰ª£‰ª∑„ÄÇÂ¶ÇÊûúË∑ØÂæÑ‰∏çÂ≠òÂú®Ôºå
//ËøîÂõû -1 „ÄÇ‰∏ÄÊù°Ë∑ØÂæÑÁöÑ‰ª£‰ª∑ÊòØË∑ØÂæÑ‰∏≠ÊâÄÊúâËæπ‰ª£‰ª∑‰πãÂíå„ÄÇ
//
//
//
//
// Á§∫‰æã 1Ôºö
//
//
//
// ËæìÂÖ•Ôºö
//["Graph", "shortestPath", "shortestPath", "addEdge", "shortestPath"]
//[[4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]], [3, 2], [0, 3], [[1, 3, 4]
//], [0, 3]]
//ËæìÂá∫Ôºö
//[null, 6, -1, null, 6]
//
//Ëß£ÈáäÔºö
//Graph g = new Graph(4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]);
//g.shortestPath(3, 2); // ËøîÂõû 6 „ÄÇ‰ªé 3 Âà∞ 2 ÁöÑÊúÄÁü≠Ë∑ØÂæÑÂ¶ÇÁ¨¨‰∏ÄÂπÖÂõæÊâÄÁ§∫Ôºö3 -> 0 -> 1 -> 2 ÔºåÊÄª‰ª£‰ª∑‰∏∫ 3 +
// 2 + 1 = 6 „ÄÇ
//g.shortestPath(0, 3); // ËøîÂõû -1 „ÄÇÊ≤°Êúâ‰ªé 0 Âà∞ 3 ÁöÑË∑ØÂæÑ„ÄÇ
//g.addEdge([1, 3, 4]); // Ê∑ªÂä†‰∏ÄÊù°ËäÇÁÇπ 1 Âà∞ËäÇÁÇπ 3 ÁöÑËæπÔºåÂæóÂà∞Á¨¨‰∫åÂπÖÂõæ„ÄÇ
//g.shortestPath(0, 3); // ËøîÂõû 6 „ÄÇ‰ªé 0 Âà∞ 3 ÁöÑÊúÄÁü≠Ë∑ØÂæÑ‰∏∫ 0 -> 1 -> 3 ÔºåÊÄª‰ª£‰ª∑‰∏∫ 2 + 4 = 6 „ÄÇ
//
//
//
//
// ÊèêÁ§∫Ôºö
//
//
// 1 <= n <= 100
// 0 <= edges.length <= n * (n - 1)
// edges[i].length == edge.length == 3
// 0 <= fromi, toi, from, to, node1, node2 <= n - 1
// 1 <= edgeCosti, edgeCost <= 10‚Å∂
// Âõæ‰∏≠‰ªª‰ΩïÊó∂ÂÄôÈÉΩ‰∏ç‰ºöÊúâÈáçËæπÂíåËá™ÁéØ„ÄÇ
// Ë∞ÉÁî® addEdge Ëá≥Â§ö 100 Ê¨°„ÄÇ
// Ë∞ÉÁî® shortestPath Ëá≥Â§ö 100 Ê¨°„ÄÇ
//
//
// Related TopicsÂõæ | ËÆæËÆ° | ÊúÄÁü≠Ë∑Ø | Â†ÜÔºà‰ºòÂÖàÈòüÂàóÔºâ
//
// üëç 47, üëé 0bug ÂèçÈ¶à | ‰ΩøÁî®ÊåáÂçó | Êõ¥Â§öÈÖçÂ•óÊèí‰ª∂
//
//
//
//

    public static
            //leetcode submit region begin(Prohibit modification and deletion)
    class Graph {

        private final List<List<int[]>> graph;

        public Graph(int n, int[][] edges) {
            graph = new ArrayList<>();
            for (int i = 0; i < n; i++) {
                graph.add(new ArrayList<>());
            }
            for (int[] edge : edges) {
                int x = edge[0];
                int y = edge[1];
                int cost = edge[2];
                graph.get(x).add(new int[]{y, cost});
            }
        }

        public void addEdge(int[] edge) {
            int x = edge[0];
            int y = edge[1];
            int cost = edge[2];
            graph.get(x).add(new int[]{y, cost});
        }

        public int shortestPath(int node1, int node2) {
            PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
            int[] dist = new int[graph.size()];
            Arrays.fill(dist, Integer.MAX_VALUE);
            dist[node1] = 0;
            pq.offer(new int[]{0, node1});
            while (!pq.isEmpty()) {
                int[] arr = pq.poll();
                int cost = arr[0];
                int curr = arr[1];
                if (curr == node2) {
                    return cost;
                }
                for (int[] nextArr : graph.get(curr)) {
                    int next = nextArr[0];
                    int nextCost = nextArr[1];
                    if (dist[next] > cost + nextCost) {
                        dist[next] = cost + nextCost;
                        pq.offer(new int[]{cost + nextCost, next});
                    }
                }

            }
            return -1;
        }
    }

    /**
     * Your Graph object will be instantiated and called as such:
     * Graph obj = new Graph(n, edges);
     * obj.addEdge(edge);
     * int param_2 = obj.shortestPath(node1,node2);
     */
//leetcode submit region end(Prohibit modification and deletion)

//Do some Test
    public static class TestClass {

        @Test
        public void defaultSolutionTest() {
            Graph graph = new Graph(4, new int[][]{{0, 2, 5}, {0, 1, 2}, {1, 2, 1}, {3, 0, 3},});
            Assert.assertEquals(6, graph.shortestPath(3, 2));
            Assert.assertEquals(-1, graph.shortestPath(0, 3));
            graph.addEdge(new int[]{1, 3, 4});
            Assert.assertEquals(6, graph.shortestPath(0, 3));
        }

    }
}
