package leetcode.editor.cn;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

import org.junit.Assert;
import org.junit.Test;

class SolutionTestÈù¢ËØïÈ¢ò08_02 {
//ËÆæÊÉ≥Êúâ‰∏™Êú∫Âô®‰∫∫ÂùêÂú®‰∏Ä‰∏™ÁΩëÊ†ºÁöÑÂ∑¶‰∏äËßíÔºåÁΩëÊ†º r Ë°å c Âàó„ÄÇÊú∫Âô®‰∫∫Âè™ËÉΩÂêë‰∏ãÊàñÂêëÂè≥ÁßªÂä®Ôºå‰ΩÜ‰∏çËÉΩËµ∞Âà∞‰∏Ä‰∫õË¢´Á¶ÅÊ≠¢ÁöÑÁΩëÊ†ºÔºàÊúâÈöúÁ¢çÁâ©Ôºâ„ÄÇËÆæËÆ°‰∏ÄÁßçÁÆóÊ≥ïÔºåÂØªÊâæÊú∫Âô®‰∫∫‰ªéÂ∑¶‰∏äËßí
//ÁßªÂä®Âà∞Âè≥‰∏ãËßíÁöÑË∑ØÂæÑ„ÄÇ 
//
// 
//
// ÁΩëÊ†º‰∏≠ÁöÑÈöúÁ¢çÁâ©ÂíåÁ©∫‰ΩçÁΩÆÂàÜÂà´Áî® 1 Âíå 0 Êù•Ë°®Á§∫„ÄÇ 
//
// ËøîÂõû‰∏ÄÊù°ÂèØË°åÁöÑË∑ØÂæÑÔºåË∑ØÂæÑÁî±ÁªèËøáÁöÑÁΩëÊ†ºÁöÑË°åÂè∑ÂíåÂàóÂè∑ÁªÑÊàê„ÄÇÂ∑¶‰∏äËßí‰∏∫ 0 Ë°å 0 Âàó„ÄÇÂ¶ÇÊûúÊ≤°ÊúâÂèØË°åÁöÑË∑ØÂæÑÔºåËøîÂõûÁ©∫Êï∞ÁªÑ„ÄÇ 
//
// Á§∫‰æã 1: 
//
// ËæìÂÖ•:
//[
//¬† [0,0,0],
//¬† [0,1,0],
//¬† [0,0,0]
//]
//ËæìÂá∫: [[0,0],[0,1],[0,2],[1,2],[2,2]]
//Ëß£Èáä: 
//ËæìÂÖ•‰∏≠Ê†áÁ≤óÁöÑ‰ΩçÁΩÆÂç≥‰∏∫ËæìÂá∫Ë°®Á§∫ÁöÑË∑ØÂæÑÔºåÂç≥
//0Ë°å0ÂàóÔºàÂ∑¶‰∏äËßíÔºâ -> 0Ë°å1Âàó -> 0Ë°å2Âàó -> 1Ë°å2Âàó -> 2Ë°å2ÂàóÔºàÂè≥‰∏ãËßíÔºâ 
//
// ËØ¥ÊòéÔºör Âíå c ÁöÑÂÄºÂùá‰∏çË∂ÖËøá 100„ÄÇ 
// Related Topics Âä®ÊÄÅËßÑÂàí 
// üëç 24 üëé 0

    public static
            //leetcode submit region begin(Prohibit modification and deletion)
    class Solution {

        public List<List<Integer>> pathWithObstacles(int[][] obstacleGrid) {
            LinkedList<List<Integer>> result = new LinkedList<>();
            if (obstacleGrid == null || obstacleGrid.length == 0) {
                return result;
            }
            int m = obstacleGrid.length;
            int n = obstacleGrid[0].length;
            boolean[][] visited = new boolean[m][n];
            backtracking(obstacleGrid, 0, 0, m, n, visited, result);
            return result;
        }

        private boolean backtracking(int[][] obstacleGrid, int i, int j, int m, int n, boolean[][] visited, LinkedList<List<Integer>> pathList) {
            if (i >= m || j >= n || obstacleGrid[i][j] == 1||visited[i][j]) {
                return false;
            }
            pathList.offerLast(Arrays.asList(i, j));
            if (i == m - 1 && j == n - 1) {
                return true;
            }
            visited[i][j] = true;
            if (backtracking(obstacleGrid, i, j + 1, m, n, visited, pathList) || backtracking(obstacleGrid, i + 1, j, m, n, visited, pathList)) {
                return true;
            }
            pathList.pollLast();
            return false;
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

    //Do some Test
    public static class TestClass {

        @Test
        public void defaultSolutionTest() {
            Solution solution = new Solution();
            Assert.assertEquals("[[0, 0], [0, 1], [0, 2], [1, 2], [2, 2]]", solution.pathWithObstacles(new int[][]{{0, 0, 0}, {0, 1, 0}, {0, 0, 0}}).toString());
            Assert.assertEquals("[]", solution.pathWithObstacles(new int[][]{{0, 1, 0}, {1, 1, 0}, {0, 0, 0}}).toString());
            Assert.assertEquals("[]", solution.pathWithObstacles(new int[][]{{1}}).toString());
            Assert.assertEquals("[]", solution.pathWithObstacles(new int[][]{{0}, {1}}).toString());
            Assert.assertEquals("[[0, 0], [1, 0], [1, 1]]", solution.pathWithObstacles(new int[][]{{0, 1}, {0, 0}}).toString());
            Assert.assertEquals("[[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [1, 7], [1, 8], [1, 9], [1, 10], [1, 11], [2, 11], [2, 12], [2, 13], [2, 14], [2, 15], [2, 16], [2, 17], [2, 18], [3, 18], [4, 18], [4, 19], [4, 20], [4, 21], [4, 22], [5, 22], [5, 23], [5, 24], [5, 25], [6, 25], [7, 25], [8, 25], [8, 26], [9, 26], [10, 26], [10, 27], [10, 28], [11, 28], [12, 28], [13, 28], [14, 28], [15, 28], [15, 29], [16, 29], [17, 29], [18, 29], [19, 29], [19, 30], [20, 30], [21, 30], [21, 31], [21, 32]]",
                    solution.pathWithObstacles(new int[][]{
                            {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
                            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                            {0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
                            {1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1},
                            {0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                            {0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0},
                            {1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                            {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0},
                            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0},
                            {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                            {0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                            {1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1},
                            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0},
                            {0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                            {0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1},
                            {1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0},
                            {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1},
                            {0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1},
                            {1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                            {0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                            {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0}}).toString());
        }
    }
}